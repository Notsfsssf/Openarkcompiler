rule cc
  command = /var/OpenArkCompiler/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang ${defines} ${include_dirs} ${cflags} ${cflags_c} -MD -MT ${out} -MF ${out}.d -o ${out} -c ${in}
  description = Building C object ${out}
  depfile = ${out}.d
  deps = gcc
rule cxx
  command = /var/OpenArkCompiler/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang++ ${defines} ${include_dirs} ${cflags} ${cflags_cc} -MD -MT ${out} -MF ${out}.d -o ${out} -c ${in}
  description = Building CXX object ${out}
  depfile = ${out}.d
  deps = gcc
rule asm
  command = /var/OpenArkCompiler/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang++ ${defines} ${include_dirs} ${asmflags} -MD -MT ${out} -MF ${out}.d -c ${in} -o ${out}
  description = ASM ${out}
  depfile = ${out}.d
  deps = gcc
rule alink
  command = rm -f ${out} && /var/OpenArkCompiler/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/llvm-ar qc ${out} ${in} && ranlib ${out}
  description = AR ${target_output_name}${output_extension}
  rspfile = ${out}.rsp
  rspfile_content = ${in}
rule solink
  command = /var/OpenArkCompiler/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang++ ${ldflags} -o ${output_dir}/${target_output_name}${output_extension} -shared -Wl,-soname=${target_output_name}${output_extension} ${in} ${solibs} ${libs}
  description = SOLINK ${target_output_name}${output_extension}
  rspfile = ${target_output_name}${output_extension}.rsp
  rspfile_content = ${in} ${solibs} ${libs}
  restat = 1
rule link
  command = /var/OpenArkCompiler/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang++ ${ldflags} -o /var/OpenArkCompiler/out/bin/${target_output_name}${output_extension} -Wl,--start-group ${in} ${libs} -Wl,--end-group ${solibs}
  description = LINK /var/OpenArkCompiler/out/bin/${target_output_name}${output_extension}
  rspfile = /var/OpenArkCompiler/out/bin/${target_output_name}${output_extension}.rsp
  rspfile_content = ${in}
rule stamp
  command = touch ${out}
  description = STAMP ${out}
rule copy
  command = cp -af ${in} ${out}
  description = COPY ${in} ${out}

build obj/maple.stamp: stamp obj/ABS_PATH/var/OpenArkCompiler/src/mapleall.stamp
build obj/ABS_PATH/var/OpenArkCompiler/src/mapleall.stamp: stamp /var/OpenArkCompiler/out/bin/maple
subninja obj/ABS_PATH/var/OpenArkCompiler/src/huawei_secure_c/libHWSecureC.ninja
subninja obj/ABS_PATH/var/OpenArkCompiler/src/maple_driver/maple.ninja
subninja obj/ABS_PATH/var/OpenArkCompiler/src/maple_ipa/libmplipa.ninja
subninja obj/ABS_PATH/var/OpenArkCompiler/src/maple_ir/libmplir.ninja
subninja obj/ABS_PATH/var/OpenArkCompiler/src/maple_me/libmplme.ninja
subninja obj/ABS_PATH/var/OpenArkCompiler/src/maple_me/libmplmewpo.ninja
subninja obj/ABS_PATH/var/OpenArkCompiler/src/mpl2mpl/libmpl2mpl.ninja
subninja obj/ABS_PATH/var/OpenArkCompiler/src/third_party/zlib-1.2.11/libz_maple_host.ninja
